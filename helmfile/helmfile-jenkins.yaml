---
#  Source: https://artifacthub.io/packages/helm/jenkinsci/jenkins

#   What is a helmfile? Read here... https://github.com/helmfile/helmfile
#   Examples: https://github.com/helmfile/helmfile/blob/main/examples/charts/argocd-helmfile-deployment/helmfile.yaml

# Before deployment, export the required env vars
# export HELM_SECRETS_DRIVER=vault

# Commands to deploy:
# helmfile deps  # < download dependencies
# helmfile template  # < template stuff. You might have to be signed into vault
# helmfile sync  # < deploy everything
# helmfile sync -f filename.yaml  # < deploy everything from file
# helmfile apply  # < deploy diff only
# helmfile destroy  # < deploy diff only
filepath: helmfile.yaml
helmBinary: helm
# kustomizeBinary: kustomize
helmDefaults:
  # verify: false
  # enableDNS: false
  # waitForJobs: false
  timeout: 60
  # skipDeps: false
  # reuseValues: false
  # deleteWait: false
  # deleteTimeout: 0
repositories:
  - name: jenkins
    url: https://charts.jenkins.io/
releases:
  - name: jenkins
    namespace: jenkins
    createNamespace: true
    chart: '{{`{{ .Release.Name }}`}}/{{`{{ .Release.Name }}`}}'
    labels:
      app.kubernetes.io/name: jenkins
  #   version: 0.0.0
  #   missingFileHandler: Warn  # set to either "Error" or "Warn". "Error" instructs helmfile to fail when unable to find a values or secrets file. When "Warn", it prints the file and continues.
  #   verify: true
  #   timeout: 60
  #   cleanupOnFail: true
    values:
      # - "charts/{{`{{ .Release.Name }}`}}/values.yaml"
      - ../chartsValues/values-{{`{{ .Release.Name }}`}}.yaml
      - admin:
          password: ""
      # - persistence:
      #     existingClaim: jenkins-persistent-volume-claim
      - controller:
          image:
            tag: 2.452.2-jdk17
## kubectl -f service/jenkins-service.yaml apply
## kubectl -f service/jenkins-persistent-volume-nfs.yaml apply
## kubectl -f service/jenkins-persistent-volume-claim.yaml apply
## kubectl patch pv jenkins-storage-persistent-volume-nfs -p '{"spec":{"claimRef": null}}'
## kubectl -f jenkins-service.yaml apply
## kubectl get secret --namespace jenkins jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode
