---
#  Source: /mnt/c/repository/HelmfileExamples/helmfile.yaml

#   What is a helmfile? Read here...
#   https://github.com/helmfile/helmfile
#   Examples: https://github.com/helmfile/helmfile/blob/main/examples/charts/argocd-helmfile-deployment/helmfile.yaml

# Before deployment, export the required env vars
# export HELM_SECRETS_DRIVER=vault

# Commands to deploy:
# helmfile deps  # < download dependencies
# helmfile template  # < template stuff. You might have to be signed into vault
# helmfile sync  # < deploy everything
# helmfile apply  # < deploy diff only
# helmfile destroy  # < deploy diff only
filepath: helmfile.yaml
helmBinary: helm
# kustomizeBinary: kustomize
helmDefaults:
  # verify: false
  # enableDNS: false
  # waitForJobs: false
  timeout: 60
  # skipDeps: false
  # reuseValues: false
  # deleteWait: false
  # deleteTimeout: 0
# repositories:
#   - name: bitnami
#     url: https://charts.bitnami.com/bitnami
releases:
  - name: postgresql
    namespace: databases
    createNamespace: true
    chart: bitnami/postgresql
    # labels:
      # app.kubernetes.io/name: postgresql
    # version: 15.4.2
  #   missingFileHandler: Warn  # set to either "Error" or "Warn". "Error" instructs helmfile to fail when unable to find a values or secrets file. When "Warn", it prints the file and continues.
  #   verify: true
  #   timeout: 60
  #   cleanupOnFail: true
    values:
      # - ../chartsValues/values-{{`{{ .Release.Name }}`}}.yaml
      - global:
          postgresql:
            auth:
              username: adminuser
              password: '12345'
              postgresPassword: '12345'
      - primary:
          persistence:
            enabled: true
            existingClaim: "postgres-persistent-volume-nfs-claim"
            mountPath: "/bitnami/postgresql/"
            storageClass: "storage-nfs"
            size: 10Gi
          service:
            type: LoadBalancer  # "ClusterIP", "NodePort", "LoadBalancer", "ExternalName"
      - volumePermissions:
          enabled: true

# export PGPASSWORD=
# psql --host=192.168.50.50 --username=adminuser --dbname=postgres
# CREATE DATABASE autogen WITH OWNER = adminuser ENCODING = 'UTF8' LOCALE_PROVIDER = 'libc' CONNECTION LIMIT = -1 IS_TEMPLATE = False;
